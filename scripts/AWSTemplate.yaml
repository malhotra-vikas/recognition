AWSTemplateFormatVersion: "2010-09-09"

Description: |
  RekognitionFaceDetection.yaml: v0.0.2 -
  Cfn template to deploy resources described in AWS Build your own face recognition service using Amazon Rekognition blog post

Parameters:
  BucketName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9-]*'
    Description: Name of Amazon S3 bucket for image upload and processing
  DynamoDBTableName:
    Type: String
    AllowedPattern: '[a-z][a-z0-9-]*'
    Description: Name of Amazon DynamoDB table to hold face metadata      
  CollectionName:
    Type: String
    AllowedPattern: '[a-zA-Z0-9_.\-]+'
    Description: Name of Amazon Rekognition collection name     

Resources:
  # IAM execution role for ImageRekognition Lambda function
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: LambdaExecutionRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: 
              - !Join ["",[!Join [":", ["arn","aws","s3","", "", !Ref BucketName]], "/*"]]
          - Effect: Allow
            Action:
              - rekognition:IndexFaces
            Resource: '*'
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: 
              !Join ["",[!Join [":", ["arn","aws","dynamodb",!Ref "AWS::Region", !Ref "AWS::AccountId"]],  ":table/", !Ref DynamoDBTableName]]       

  BootstrapExecutionRole:
    # IAM execution role for Bootstrap Lambda function
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/service-role/"
      Policies:
      - PolicyName: AmazonRekognition
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - rekognition:CreateCollection
              - rekognition:DeleteCollection
              - rekognition:ListCollections
            Resource: "*"          
      - PolicyName: AWSLambdaLogs
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: "arn:aws:logs:*:*:*"                  

  DynamoDBTable: 
    Type: "AWS::DynamoDB::Table"
    Properties: 
      AttributeDefinitions: 
        - 
          AttributeName: "RekognitionId"
          AttributeType: "S"
      KeySchema: 
        - 
          AttributeName: "RekognitionId"
          KeyType: "HASH"         
      ProvisionedThroughput: 
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "1"
      TableName: 
        !Ref DynamoDBTableName

  ImageRekognition:
    Type: "AWS::Lambda::Function"
    DependsOn:
      - LambdaExecutionRole
    Properties:
      FunctionName: !Join ["-", ["IndexFaces", !Ref "AWS::StackName"]]
      Code:
        ZipFile: !Sub |
          import os
          import boto3
          from decimal import Decimal
          import json
          import urllib

          print('Loading function')

          dynamodb = boto3.client('dynamodb')
          s3 = boto3.client('s3')
          rekognition = boto3.client('rekognition')


          # --------------- Helper Functions ------------------

          def index_faces(bucket, key):
              CollectionId = os.getenv("CollectionName")

              response = rekognition.index_faces(
                  Image={"S3Object": {"Bucket": bucket, "Name": key}},
                  CollectionId=CollectionId,
              )
              return response


          def update_index(tableName,faceId, fullName):
              response = dynamodb.put_item(
                  TableName=tableName,
                  Item={
                  'RekognitionId': {'S': faceId},
                  'FullName': {'S': fullName}
                  }
              )

          # --------------- Main handler ------------------

          def lambda_handler(event, context):

              # Get the object from the event
              bucket = event['Records'][0]['s3']['bucket']['name']
              key = urllib.parse.unquote_plus(event['Records'][0]['s3']['object']['key'], encoding='utf-8')
                        

              try:
                  # Calls Amazon Rekognition IndexFaces API to detect faces in S3 object
                  # to index faces into specified collection
                  response = index_faces(bucket, key)

                  # Commit faceId and full name object metadata to DynamoDB
                  if response['ResponseMetadata']['HTTPStatusCode'] == 200:
                      faceId = response['FaceRecords'][0]['Face']['FaceId']

                      ret = s3.head_object(Bucket=bucket,Key=key)
                      personFullName = ret['Metadata']['fullname']

                      update_index(os.getenv("DynamoDBTableName"), faceId, personFullName)

                  # Print response to console.
                  print(response)

                  return response
              except Exception as e:
                  print(e)
                  print("Error processing {} from bucket {}. ".format(key, bucket)) 
                  raise e

      Description: Triggered by S3, indexes faces against a collection in Amazon Rekognition
      Handler: index.lambda_handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: python3.8
      Timeout: 5
      Environment:
        Variables:
          CollectionName: !Ref CollectionName
          DynamoDBTableName: !Ref DynamoDBTableName
      
  UploadBucket:
    Type: "AWS::S3::Bucket"
    DependsOn:
      - RekognitionLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ImageRekognition.Arn
            Filter: 
              S3Key:
                Rules:
                  - Name: prefix
                    Value: index/

  RekognitionLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      "Action": "lambda:invokeFunction"
      "FunctionName": !GetAtt ImageRekognition.Arn
      "Principal": "s3.amazonaws.com"
      "SourceArn": !Join [":", ["arn","aws","s3","", "", !Ref BucketName]]  
      "SourceAccount": !Ref "AWS::AccountId"

  LambdaCreateCollection:
    Type: "AWS::Lambda::Function" 
    Properties:
      Description: Custom resource function to create Rekognition collection
      FunctionName:
          Fn::Join: ["-", [!Ref "AWS::StackName", "CreateCollection"]]
      Handler: index.lambda_handler
      Role: !GetAtt [ BootstrapExecutionRole, Arn ]
      Runtime: python3.8
      Timeout: 10
      Environment:
        Variables:
          CollectionName: !Ref CollectionName
      Code:
        ZipFile: !Sub |
          import boto3
          import os
          import json
          import logging
          import traceback
          # The package below is provided by AWS
          # https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/cfn-lambda-function-code-cfnresponsemodule.html
          import cfnresponse


          def lambda_handler(event, context):

              print ('received event:' + json.dumps(event, indent=2))

              rekognition = boto3.client('rekognition')
              logger = logging.getLogger()

              if event['RequestType'] == 'Delete':
                  try:
                      ret = rekognition.delete_collection(CollectionId=os.getenv("CollectionName"))
                      if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                          print('Resource deleted')
                          cfnresponse.send(event, context, "SUCCESS", {})
                      return
                  except:
                      logger.error("error: {0}".format(traceback.format_exc()))
                      cfnresponse.send(event, context, "FAILED", {})
              else:
                  try:
                      ret = rekognition.create_collection(CollectionId=os.getenv("CollectionName"))
                      if ret['ResponseMetadata']['HTTPStatusCode'] == 200:
                          print('Resource created')
                          cfnresponse.send(event, context, "SUCCESS", {})
                  except:
                      logger.error("error: {0}".format(traceback.format_exc()))
                      cfnresponse.send(event, context, "FAILED", {})
               
  PopulateCreateCollection: 
    Type: "Custom::CreateCollection"
    Version: "1.0"
    Properties: 
      ServiceToken: !GetAtt LambdaCreateCollection.Arn    


Outputs:
  DynamoDBTableName:
    Value: !Ref DynamoDBTableName
    Description: Name of the DynamoDB table
  CollectionName:
    Value: !Ref CollectionName
    Description: Name of the Rekognition collection
  BucketName:
    Value: !Ref BucketName    
    Description: Name of the S3 bucket
